@using System.Linq.Expressions
@using System.Collections.Generic;
@typeparam T

<MudStack>
    <MudStack>
        <MudChip T="T" OnClick="@OpenDialog" Size="Size.Small" Text="Add value" Icon="@Icons.Material.Filled.Add" />
        <MudChipSet T="T" Size="Size.Small">
            @foreach (var item in ((IEnumerable<T>)((ConstantExpression)MethodCallExpression.Arguments[0]).Value))
            {
                <MudChip T="T" Color="Color.Default" Variant="Variant.Text" OnClose="@RemoveListItem" Value="@item" />
            }
        </MudChipSet>
    </MudStack>
</MudStack>

<MudDialog @bind-Visible="_showListItemDialog" Options="_listItemDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Add list value
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Label="Value" T="T" @bind-Value="_listItemInputValue" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="px-10" OnClick="@AddListItem">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public MethodCallExpression MethodCallExpression { get; set; }

    [Parameter]
    public Action<T> OnUpdateValue { get; set; }

    [Parameter]
    public Action<IEnumerable<T>> OnUpdateValues { get; set; }

    private T _listItemInputValue;
    private IEnumerable<T> _items;
    private bool _showListItemDialog;
    private DialogOptions _listItemDialogOptions = new DialogOptions { CloseButton = true };

    protected override void OnParametersSet()
    {
    }

    private void OpenDialog()
    {
        _showListItemDialog = true;
        _items = (IEnumerable<T>)((ConstantExpression)(MethodCallExpression.Arguments[0])).Value;
    }

    private void AddListItem()
    {
        var items = _items.ToList();
        items.Add(_listItemInputValue);
        _showListItemDialog = false;
        _listItemInputValue = default(T);
        UpdateValues(items);
    }

    private void RemoveListItem(MudChip<T> item)
    {
        var items = _items.ToList();
        items.Remove(item.Value);
        UpdateValues(items);
    }

    private void UpdateValue(T value) => OnUpdateValue.Invoke(value);
    
    private void UpdateValues(IEnumerable<T> value) => OnUpdateValues.Invoke(value);
}
