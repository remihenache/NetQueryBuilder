@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using NetQueryBuilder.Extensions
@using NetQueryBuilder.Operators
<MudSelect T="ExpressionOperator" Label="Operator" Value="_operator" ValueChanged="OperatorChanged" ToStringFunc="@(o => o.DisplayText)">
    @foreach (var item in _operators)
    {
        <MudSelectItem Value="@item">@item.DisplayText</MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public Expression PredicateExpression { get; set; }

    [Parameter] public Action<Expression> OnOperatedUpdated { get; set; }

    private ExpressionOperator _operator { get; set; }
    private List<ExpressionOperator> _operators = new();
    private Expression _valueExpression;
    private MemberExpression _memberAccessExpression;

    protected override void OnInitialized()
    {
    }

    protected override void OnParametersSet()
    {
        InitializeOperators();
    }

    private void InitializeOperators()
    {
        switch (PredicateExpression)
        {
            case BinaryExpression binaryExpression:
                InitializeBinaryExpression(binaryExpression);
                break;
            case MethodCallExpression methodCallExpression:
                InitializeMethodCallExpression(methodCallExpression);
                break;
            case UnaryExpression { NodeType: ExpressionType.Not, Operand: MethodCallExpression notMethodCallExpression }:
                InitializeMethodCallExpression(notMethodCallExpression, true);
                break;
            default:
                throw new NotSupportedException($"Expression type {PredicateExpression.NodeType} is not supported");
        }
    }

    private void InitializeBinaryExpression(BinaryExpression binaryExpression)
    {
        _operators = GetOperators(binaryExpression.Left.Type).ToList();
        _operator = _operators.FirstOrDefault(o => o.ExpressionType == binaryExpression.NodeType) ?? _operators.First();
        _valueExpression = binaryExpression.Right;
        _memberAccessExpression = (MemberExpression)binaryExpression.Left;
    }

    private void InitializeMethodCallExpression(MethodCallExpression methodCallExpression, bool isNegated = false)
    {
        switch (methodCallExpression.Method.Name)
        {
            case "Like":
                _operators = GetOperators(((MemberExpression)methodCallExpression.Arguments[1]).Type);
                _memberAccessExpression = (MemberExpression)methodCallExpression.Arguments[1];
                _valueExpression = methodCallExpression.Arguments[2];
                break;
            case "Contains":
                _operators = GetOperators(((MemberExpression)methodCallExpression.Arguments[1]).Type);
                _memberAccessExpression = (MemberExpression)methodCallExpression.Arguments[1];
                _valueExpression = methodCallExpression.Arguments[0];
                break;
            default:
                throw new NotSupportedException($"Method {methodCallExpression.Method.Name} is not supported");
        }

        _operator = _operators
                        .OfType<MethodCallOperator>()
                        .FirstOrDefault(o =>
                            o.ExpressionType == methodCallExpression.NodeType
                            && o.MethodInfo == methodCallExpression.Method
                            && o.IsNegated == isNegated)
                    ?? _operators.First();
    }

    private void OperatorChanged(ExpressionOperator op)
    {
        _operator = op;

        switch (op)
        {
            case BinaryOperator:
                var newBinaryExpression = Expression.MakeBinary(
                    op.ExpressionType,
                    _memberAccessExpression,
                    // Perserve the right binary constant value for BinaryOperators
                    op is BinaryOperator
                        ? _valueExpression
                        : Expression.Constant(_memberAccessExpression.Type.GetDefaultValue()));
                PredicateExpression = newBinaryExpression;
                OnOperatedUpdated?.Invoke(newBinaryExpression);
                break;

            case MethodCallOperator methodCall when methodCall.MethodInfo.Name == "Like":
                var likeMethodCallExpression = Expression.Call(
                    null,
                    methodCall.MethodInfo,
                    Expression.Constant(EF.Functions),
                    _memberAccessExpression,
                    Expression.Constant(_memberAccessExpression.Type.GetDefaultValue(), _memberAccessExpression.Type));
                UpdateMethodCallExpression(methodCall.IsNegated, likeMethodCallExpression);
                break;

            case MethodCallOperator methodCall when methodCall.MethodInfo.Name == "Contains":
                var containsMethodCallExpression = Expression.Call(
                    null,
                    methodCall.MethodInfo,
                    Expression.Constant(Array.CreateInstance(_memberAccessExpression.Type, 0)),
                    _memberAccessExpression);
                UpdateMethodCallExpression(methodCall.IsNegated, containsMethodCallExpression);
                break;
        }

        void UpdateMethodCallExpression(bool isNegated, MethodCallExpression expression)
        {
            PredicateExpression = expression;
            OnOperatedUpdated?.Invoke(isNegated ? Expression.Not(expression) : expression);
        }
    }

}