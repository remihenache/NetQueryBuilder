@using System.Linq.Expressions
@using NetQueryBuilder.Blazor.ExpressionVisitors.Extensions
<MudStack Spacing="5">
    <Predicate PredicateExpression="PredicateExpression.Left"
               ParameterExpression="@ParameterExpression"
               OnChange="@ChangeLeft"
               OnRemove="@RemoveLeft">
    </Predicate>
    <div>
        <MudSelect T="string" Label="Operator" Value="@PredicateExpression.NodeType.ToString()" ValueChanged="ChangeOperator">
            @foreach (var item in Operators)
            {
                <MudSelectItem T="string" Value="@item.Key">@item.Value</MudSelectItem>
            }
        </MudSelect>
    </div>
    <Predicate PredicateExpression="PredicateExpression.Right"
               ParameterExpression="@ParameterExpression"
               OnChange="@ChangeRight"
               OnRemove="@RemoveRight">
    </Predicate>
</MudStack>

@code {

    Dictionary<string, string> Operators = new Dictionary<string, string>
    {
        {"AndAlso", "And"},
        {"OrElse", "Or"},
    };

    [Parameter]
    public Action<Expression> OnChange { get; set; }

    [Parameter]
    public BinaryExpression PredicateExpression { get; set; }

    [Parameter]
    public ParameterExpression ParameterExpression { get; set; }

    protected override void OnInitialized()
    {
    }

    private void ChangeLeft(Expression left)
    {
        PredicateExpression = Expression.MakeBinary(PredicateExpression.NodeType, left, PredicateExpression.Right);
        OnChange(PredicateExpression);
    }

    private void ChangeRight(Expression right)
    {
        PredicateExpression = Expression.MakeBinary(PredicateExpression.NodeType, PredicateExpression.Left, right);
        OnChange(PredicateExpression);
    }

    private void ChangeOperator(string op)
    {
        var expressionType = (ExpressionType)Enum.Parse(typeof(ExpressionType), op);

        PredicateExpression = Expression.MakeBinary(expressionType, PredicateExpression.Left, PredicateExpression.Right);
        OnChange(PredicateExpression);
    }

    private void RemoveLeft()
    {
        OnChange(PredicateExpression.Right.Copy());
    }

    private void RemoveRight()
    {
        OnChange(PredicateExpression.Left.Copy());
    }
}